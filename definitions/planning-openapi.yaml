openapi: 3.0.3
info:
  title: Compute Sports Planning API
  version: 1.0.0
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
servers:
  - url: "https://compute-api.sportsscheduler.nl/v1"
security:
  - ApiKeyAuth: []
paths:
  /planning:
    post:
      operationId: computePlanning
      summary: computes a planning based on request parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanningRequest"
      responses:
        200:
          description: Planning result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Planning"
        400:
          description: Bad Request - Invalid input or malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the bad request
        408:           
          description: Request Timeout (from PlanningRequest.maxNrOfSeconds)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the bad request
                    
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:

  
  PlanningRequest:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/PlanningCategory"
          minItems: 1

    PlanningConfiguration:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/PlanningCategory"
          minItems: 1
        sports:
          type: array
          items:
            $ref: "#/components/schemas/PlanningSport"
          minItems: 1
        referees:
          type: array
          items:
            $ref: "#/components/schemas/PlanningReferee"
        gameOrder:
          $ref: "#/components/schemas/GameOrderEnum"
        maxNrOfGamesInARow:
          type: object
          properties: 
            forPlace: 
              type: integer
              nullable: true
            includeSelfRefereePlaces: 
              type: boolean
              nullable: true
            forReferee: 
              type: integer
              nullable: true
          required:
            - forPlace
            - includeSelfRefereePlaces
            - forReferee
      required:
        - categories
        - sports
        - referees
        - gameOrder
        - maxNrOfGamesInARow
    Planning:
      type: object
      properties:
        planningConfiguration:
          $ref: "#/components/schemas/PlanningConfiguration"
        games:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/PlanningAgainstGame"
              - $ref: "#/components/schemas/PlanningTogetherGame"
          minItems: 1
      required:
        - planningConfiguration
        - games
    PlanningCategory:
      type: object
      properties:
        categoryNr:
          type: integer
        poules:
          type: array
          items:
            $ref: "#/components/schemas/PlanningPoule"
          minItems: 1
      required:
        - categoryNr
        - poules
    PlanningSport:
      type: object
      properties:
        sportNr:
          type: integer
        seatConfigEnum:
          $ref: "#/components/schemas/SeatConfigEnum"
        nrOfCycles:
          type: integer
        nrOfCycleParts:
          type: integer
        nrOfRefereesPerGame:
          type: integer
        fields:
          type: array
          items:
            $ref: "#/components/schemas/PlanningField"
          minItems: 1
        selfRefereeFilters:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/SelfRefereeFilter"
      required:
        - seatConfigEnum
        - nrOfCycles
        - nrOfCycleParts
        - nrOfRefereesPerGame
        - fields       
    SelfRefereeFilter:
      type: object
      properties:
        nrOfRefereesPerPlace:
          type: integer
        scope:
          $ref: "#/components/schemas/SelfRefereeScopeEnum"
        categoryNrs:
          type: array
          nullable: true
          description: only used when scope is OtherPoules(SameCategory or OtherCategories)
          items:
            type: integer
        pouleNrs:
          type: array
          nullable: true
          description: only used when scope is SamePoule
          items:
            type: integer
      required:
        - nrOfRefereesPerPlace 
        - scope

    TogetherSeat:
      type: object
      properties:
        seatNr:
          type: integer
        batchNr:
          type: integer
      required:
        - seatNr
        - batchNr

    PlanningField:
      type: object
      properties:
        fieldNr:
          type: integer
        pouleFilters:
          type: array
          nullable: true
          description: |
            There should be at least 1 item          
          items:
            $ref: "#/components/schemas/PlanningFieldFilter"
      required:
        - fieldNr
    PlanningFieldFilter:
      type: object
      properties:
        categoryNrs:
          type: array
          items:
            type: integer
        pouleNrs:
          type: array
          items:
            type: integer
      required:
        - categoryNrs
        - pouleNrs
    PlanningAgainstGame:
      allOf:
        - $ref: "#/components/schemas/PlanningGameProperties"
      type: object
      properties:
        seats:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/HomeAwaySeatEnum"
              - $ref: "#/components/schemas/NorthSouthEastWestSeatEnum"
        batchNr:
          type: integer
      required:
        - seats
        - batchNr
        
    PlanningTogetherGame:
      allOf:
        - $ref: "#/components/schemas/PlanningGameProperties"
      type: object
      properties:
        seats:
          type: array
          items:
            $ref: "#/components/schemas/TogetherSeat"
    PlanningGameProperties:
      type: object
      properties:
        categoryNr:
          type: integer
        pouleNr:
          type: integer
        sportNr:
          type: integer
        fieldNr:
          type: integer
      required:
        - categoryNr
        - pouleNr
        - sportNr
        - fieldNr
    PlanningReferee:
      type: object
      properties:
        refereeNr:
          type: integer
        categoryNrs:
          type: array
          nullable: true
          description: |
            If undefined, all categories will be used, else the categories in the array will be assigned to
          items:
            type: integer
        sportNrs:
          type: array
          nullable: true
          description: |
            If undefined, all sports will be assigned to, else the sports in the array will be assigned to
          items:
            type: integer
      required:
        - refereeNr
        - categoryNrs
        - sportNrs  
    PlanningPoule:
      type: object
      properties:
        pouleNr:
          type: integer
        places:
          type: array
          description: |
            The maximum difference between the greatest and smallest poule is always 1
          example: |
            [6,5]
          items:
            type: integer
          minItems: 1
      required:
        - pouleNr
        - places

    HomeAwaySeatEnum:
      type: string
      enum:
        - HomeSeat
        - AwaySeat
    NorthSouthEastWestSeatEnum:
      type: string
      enum:
        - NorthSeat
        - SouthSeat
        - WestSeat
        - EastSeat
    SelfRefereeScopeEnum:
      type: string
      enum:
        - SamePoule
        - OtherPoulesSameCategory
        - OtherPoulesOtherCategories
    GameOrderEnum:
      type: string
      enum:
        - CycleFirst
        - PouleFirst
    SeatConfigEnum:
      type: string
      enum:
        - HomeAwayEnum
        - NorthSouthEastWestEnum
        - TogetherSeatConfig
