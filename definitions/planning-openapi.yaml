openapi: 3.0.3
info:
  title: Sports Planning API
  version: 1.0.0
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
servers:
  - url: "https://api.sportsscheduler.nl/v1"
security:
  - ApiKeyAuth: []
paths:
  /planning:
    post:
      operationId: generatePlanning
      summary: Generate a planning based on configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanningConfiguration"
      responses:
        "200":
          description: Planning result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Planning"
        "400":
          description: Bad Request - Invalid input or malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the bad request
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    PlanningConfiguration:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/PlanningCategory"
          minItems: 1
        sports:
          type: array
          items:
            $ref: "#/components/schemas/PlanningSport"
          minItems: 1
        referees:
          type: array
          items:
            $ref: "#/components/schemas/PlanningReferee"
        gameOrder:
          $ref: "#/components/schemas/GameOrderEnum"
        nrOfGamesInARow:
          type: integer
      required:
        - categories
        - sports
        - referees
        - gameOrder
        - nrOfGamesInARow
    Planning:
      type: object
      properties:
        planningConfiguration:
          $ref: "#/components/schemas/PlanningConfiguration"
        games:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/PlanningAgainstGame"
              - $ref: "#/components/schemas/PlanningTogetherGame"
          minItems: 1
      required:
        - planningConfiguration
        - games
    PlanningCategory:
      type: object
      properties:
        categoryNr:
          type: integer
        poules:
          type: array
          items:
            $ref: "#/components/schemas/PlanningPoule"
          minItems: 1
      required:
        - categoryNr
        - poules
    PlanningSport:
      type: object
      properties:
        seatConfigEnum:
          $ref: "#/components/schemas/SeatConfigEnum"
        nrOfCycles:
          type: integer
        nrOfRefereesPerGame:
          type: integer
        fields:
          type: array
          items:
            $ref: "#/components/schemas/PlanningField"
          minItems: 1
        selfRefereeInfo:
          type: object
          nullable: true
          properties:
            selfRefereeScope:
              $ref: "#/components/schemas/SelfRefereeScopeEnum"
            nrOfSeatsPerGame:
              type: integer
          required:
            - selfRefereeScope
            - nrOfSeatsPerGame
      required:
        - seatConfigEnum
        - nrOfCycles
        - nrOfRefereesPerGame
        - fields
    TogetherSeat:
      type: object
      properties:
        seatNr:
          type: integer
        batchNr:
          type: integer
      required:
        - seatNr
        - batchNr

    PlanningField:
      type: object
      properties:
        fieldNr:
          type: integer
        pouleFilters:
          type: array
          description: |
            All poules will be used when:
            - If no pouleFilters
            - If no pouleNrs available
            When pouleFilters are active all poules should be covered
          items:
            type: object
            properties:
              categoryNr:
                type: integer
              pouleNrs:
                type: array
                items:
                  type: integer
      required:
        - fieldNr
        - pouleFilters
    PlanningAgainstGame:
      allOf:
        - $ref: "#/components/schemas/PlanningGameProperties"
      type: object
      properties:
        seats:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/HomeAwayEnum"
              - $ref: "#/components/schemas/NorthSouthEastWestEnum"
        batchNr:
          type: integer
      required:
        - batchNr
        - seats

    PlanningTogetherGame:
      allOf:
        - $ref: "#/components/schemas/PlanningGameProperties"
      type: object
      properties:
        seats:
          type: array
          items:
            $ref: "#/components/schemas/TogetherSeat"
    PlanningGameProperties:
      type: object
      properties:
        categoryNr:
          type: integer
        pouleNr:
          type: integer
        sportNr:
          type: integer
        fieldNr:
          type: integer
      required:
        - categoryNr
        - pouleNr
        - sportNr
        - fieldNr
    PlanningReferee:
      type: object
      properties:
        refereeNr:
          type: integer
        filters:
          type: array
          description: |
            All poules will be used when:
            - If no pouleFilters
            - If no pouleNrs available
            When pouleFilters are active all poules should be covered
          items:
            type: object
            properties:
              sportNr:
                type: integer
              categoryNr:
                type: integer
      required:
        - refereeNr
        - filters
    PlanningPoule:
      type: object
      properties:
        pouleNr:
          type: integer
        places:
          type: array
          description: |
            The maximum difference between the greatest and smallest poule is always 1
          example: |
            [6,5]
          items:
            type: integer
          minItems: 1
      required:
        - pouleNr
        - places

    HomeAwayEnum:
      type: string
      enum:
        - HomeSeat
        - AwaySeat
    NorthSouthEastWestEnum:
      type: string
      enum:
        - NorthSeat
        - SouthSeat
        - WestSeat
        - EastSeat
    SelfRefereeScopeEnum:
      type: string
      enum:
        - SamePoule
        - OtherPoules
    GameOrderEnum:
      type: string
      enum:
        - CycleFirst
        - PouleFirst
    SeatConfigEnum:
      type: string
      enum:
        - HomeAwayEnum
        - NorthSouthEastWestEnum
        - TogetherSeatConfig
